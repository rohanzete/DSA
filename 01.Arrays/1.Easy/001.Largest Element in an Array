
/*

LEETCODE:-75.Sort Colors
LINK:-https://leetcode.com/problems/sort-colors/description/
PAGE NO:16
___________________________________________________________________________________________________________________________________________

PROBLEM:-
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

_____________________________________________________________________________________________________________________________________________

*/


//CODE:-
class Solution {
    private void swap(int []nums,int start,int end){
        int temp=nums[start];
        nums[start]=nums[end];
        nums[end]=temp;
    }
    public void sortColors(int[] nums) {
    int start=0,end=nums.length-1,index=0;
    while(index<=end){
        if(nums[index]==2){
        swap(nums,index,end);
        end--;
      }else if(nums[index]==0){
        swap(nums,start,index);
        start++;
        index++;
      }else{
        //if index==1 then just skip it
        index++;
      }
    }
     
    }
}

